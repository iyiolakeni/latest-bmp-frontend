{
    "sourceFile": "src/app/create-form/create-form.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734168623599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734168623599,
            "name": "Commit-0",
            "content": "import { Component, Inject, Output } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { ApiResponse, UserResponse } from '../interface/books.model';\r\nimport { SharedServiceService } from '../services/shared-service/shared-service.service';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MerchantService } from '../services/merchant/merchant.service';\r\nimport { BusinessCategoryService } from '../services/business-category/business-category.service';\r\nimport { CardTypeService } from '../services/card-type/card-type.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { RequestsService } from '../services/requests/requests.service';\r\n\r\n@Component({\r\n  selector: 'app-create-form',\r\n  templateUrl: './create-form.component.html',\r\n  styleUrl: './create-form.component.scss',\r\n})\r\nexport class CreateFormComponent {\r\n  selectedIndex = 0;\r\n  user!: UserResponse;\r\n  formGroup: FormGroup = new FormGroup({});\r\n  merchant: any;\r\n  cardType: any;\r\n  businessCategory: any;\r\n  private subscriptions: Subscription[] = [];\r\n  apiResponse: string = '';\r\n  show: boolean = false;\r\n  message: string = '';\r\n  tabs = [{ label: 'REQUEST FORM' }];\r\n  isLoading: boolean = false;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<CreateFormComponent>,\r\n    private sharedService: SharedServiceService,\r\n    private fb: FormBuilder,\r\n    private merchantService: MerchantService,\r\n    private businessCategoryService: BusinessCategoryService,\r\n    private cardTypService: CardTypeService,\r\n    private service: RequestsService,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    this.formGroup = this.fb.group({\r\n      noOfPos: [0, Validators.required],\r\n      terminalLocation: [[], Validators.required],\r\n      contactPerson: ['', Validators.required],\r\n      contactNumber: ['', Validators.required],\r\n      bankName: ['', Validators.required],\r\n      accountNumber: ['', Validators.required],\r\n      notes: [''],\r\n      cardTypeId: ['', Validators.required],\r\n      businessCategoryId: ['', Validators.required],\r\n      merchantId: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.user = this.sharedService.getUser();\r\n    this.loadExtraData();\r\n  }\r\n\r\n  toTitleCase(str: string): string {\r\n    if (!str) return str;\r\n    return str.replace(/\\w\\S*/g, (txt) => {\r\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n    });\r\n  }\r\n\r\n  selectTab(index: number) {\r\n    this.selectedIndex = index;\r\n  }\r\n\r\n  loadExtraData() {\r\n    this.merchantList();\r\n    this.cardList();\r\n    this.businessCategoryList();\r\n  }\r\n\r\n  merchantList() {\r\n    this.subscriptions.push(this.merchantService.getAll().subscribe((response: ApiResponse<any>) => {\r\n      this.merchant = response.data.data;\r\n    }));\r\n  }\r\n\r\n  cardList() {\r\n    this.subscriptions.push(this.cardTypService.getAll().subscribe((response: ApiResponse<any>) => {\r\n      this.cardType = response.data.data;\r\n    }));\r\n  }\r\n\r\n  businessCategoryList() {\r\n    this.subscriptions.push(\r\n      this.businessCategoryService\r\n        .getAll()\r\n        .subscribe((response: ApiResponse<any>) => {\r\n          this.businessCategory = response.data.data;\r\n        })\r\n    );\r\n  }\r\n\r\n  onClose() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onSubmit() {\r\n    this.isLoading = true;\r\n    if (this.formGroup.valid) {\r\n      const payload ={\r\n        ...this.formGroup.value,\r\n        userId: this.user.id,\r\n      } \r\n      this.subscriptions.push(\r\n        this.service.create(payload).subscribe((response: ApiResponse<any>) => {\r\n          if (response.data.success) {\r\n            this.show = true;\r\n            this.message = 'success'\r\n            this.apiResponse = response.data.message;\r\n            this.isLoading = false;\r\n            setTimeout(() =>{\r\n              this.show = false;\r\n              this.dialogRef.close();\r\n            })\r\n          } else {\r\n            this.show = true;\r\n            this.message = 'error'\r\n            this.apiResponse = \"Error creating request, try again\";\r\n            this.isLoading = false;\r\n            setTimeout(() =>{\r\n              this.show = false;\r\n            }, 5000)\r\n          }\r\n        })\r\n      );\r\n    }else{\r\n      this.show = true;\r\n      this.isLoading = false;\r\n      this.message = 'warning'\r\n      this.apiResponse = 'Please fill all required fields';\r\n      setTimeout(() =>{\r\n        this.show = false;\r\n      }, 5000)\r\n    }\r\n  }\r\n\r\n  getFormattedDate(dateString: string): string {\r\n    try {\r\n      const date = new Date(dateString);\r\n      if (isNaN(date.getTime())) {\r\n        throw new Error('Invalid date');\r\n      }\r\n      const options: Intl.DateTimeFormatOptions = {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n      };\r\n      const formattedDate = date\r\n        .toLocaleDateString('en-GB', options)\r\n        .replace(/\\//g, '-');\r\n\r\n      return formattedDate;\r\n    } catch (error) {\r\n      console.error('Error formatting date:', error);\r\n      return 'Invalid date';\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach((sub) => sub.unsubscribe());\r\n  }\r\n}\r\n"
        }
    ]
}
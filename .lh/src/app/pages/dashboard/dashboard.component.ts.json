{
    "sourceFile": "src/app/pages/dashboard/dashboard.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734034266141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734034375624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,12 +217,13 @@\n         pending: this.approvalService.getPendinRequest(),\r\n         approved: this.approvalService.getApprovedRequest(),\r\n         rejected: this.approvalService.getRejectedRequest()\r\n       };\r\n-    } else {\r\n+    } else if (this.user.jobPosition === 'POS Business Officer') {\r\n       observables = {\r\n-        deployed: this.requestService.getDeployedRequests(this.user.id),\r\n-        delivered: this.requestService.getDeliveredRequests(this.user.id)\r\n+        pending: this.deployService.getPendinRequest(),\r\n+        deployed: this.deployService.getDeployedRequest(),\r\n+        delivered: this.deployService.getDeliveredRequest()\r\n       };\r\n     }\r\n   \r\n     forkJoin(observables).pipe(\r\n"
                },
                {
                    "date": 1734034890589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -435,8 +435,38 @@\n       textColor: 'text-rose-600',\r\n       trend: '-3%'\r\n     }\r\n   ]\r\n+} else if (this.user.jobPosition === 'POS Business Officer') {\r\n+  this.statusCards = [\r\n+    { \r\n+      title: 'Pending', \r\n+      count: this.pendingCount, \r\n+      iconName: 'trending_up',\r\n+      bgColor: 'bg-amber-50', \r\n+      borderColor: 'border-amber-300', \r\n+      textColor: 'text-amber-600',\r\n+      trend: '+12%'\r\n+    },\r\n+    { \r\n+      title: 'Deployed', \r\n+      count: this.deployedCount, \r\n+      iconName: 'rocket_launch',\r\n+      bgColor: 'bg-sky-50', \r\n+      borderColor: 'border-sky-300', \r\n+      textColor: 'text-sky-600',\r\n+      trend: '+22%'\r\n+    },\r\n+    { \r\n+      title: 'Delivered', \r\n+      count: this.deliveredCount, \r\n+      iconName: 'inventory_2',\r\n+      bgColor: 'bg-indigo-50', \r\n+      borderColor: 'border-indigo-300', \r\n+      textColor: 'text-indigo-600',\r\n+      trend: '+15%'\r\n+    }\r\n+  ]\r\n }\r\n }\r\n \r\n createNewRequest() {\r\n"
                }
            ],
            "date": 1734034266141,
            "name": "Commit-0",
            "content": "import { ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { RequestsService } from '../../services/requests/requests.service';\r\nimport { SharedServiceService } from '../../services/shared-service/shared-service.service';\r\nimport { ApiResponse, UserResponse } from '../../interface/books.model';\r\nimport {Chart, ChartConfiguration, ChartType, registerables} from 'chart.js';\r\nimport { finalize, forkJoin, Observable, Subscription } from 'rxjs';\r\nimport { DatePipe } from '@angular/common';\r\nimport { ApproveRequestService } from '../../services/approve-request/approve-request.service';\r\nimport { DeployedTableService } from '../../services/deployed-table/deployed-table.service';\r\n\r\ninterface StatusCard {\r\n  title: string;\r\n  count: number;\r\n  iconName: string;\r\n  bgColor: string;\r\n  borderColor: string;\r\n  textColor: string;\r\n  trend: string;\r\n}\r\n\r\ninterface RequestStatus {\r\n  status: string;\r\n  count: number;\r\n  color: string;\r\n  description?: string;\r\n}\r\n\r\ninterface Notification {\r\n  id: number;\r\n  title: string;\r\n  message: string;\r\n  type: 'info' | 'success' | 'warning' | 'error';\r\n  timestamp: Date;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrl: './dashboard.component.scss'\r\n})\r\nexport class DashboardComponent {\r\n  @ViewChild('chartCanvas', {static: false}) chartCanvas?: ElementRef<HTMLCanvasElement>\r\n  \r\n  pendingCount: number = 0;\r\n  approvedCount: number = 0;\r\n  rejectedCount: number = 0;\r\n  deployedCount: number = 0;\r\n  deliveredCount: number = 0;\r\n  user!: UserResponse;\r\n  loading: boolean = false;\r\n  dateToday: string | null = new DatePipe('en-US').transform(new Date(), 'EEE, MMM d');\r\n  processingTime: number = 0;\r\n  private subscriptions: Subscription[] = [] ;\r\n  \r\n  statusCards: StatusCard[] = []\r\n\r\n  // Donought Chart Data\r\n    requestStatuses: RequestStatus[] = [];\r\n    selectedRequestStatus: RequestStatus | null = null;\r\n    private chartInstance: Chart | null = null;\r\n\r\n    public donutChartType: ChartType = 'doughnut';\r\n    public donutChartOptions: ChartConfiguration['options'] = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          position: 'bottom',\r\n          labels: {\r\n            usePointStyle: true,\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Request Distribution',\r\n        },\r\n        tooltip:{\r\n          callbacks: {\r\n            label: (context: { label?: string; parsed: number; dataset: { data: unknown[] } }) => {\r\n              const label = context.label || '';\r\n              const value = context.parsed || 0;\r\n              \r\n              // Safely calculate total\r\n              const total = context.dataset.data.reduce((acc: number, curr: unknown) => {\r\n                const numValue = typeof curr === 'number' ? curr : 0;\r\n                return acc + numValue;\r\n              }, 0);\r\n            \r\n              const percentage = total > 0 \r\n                ? ((value / total) * 100).toFixed(1)\r\n                : '0';\r\n            \r\n              return `${label}: ${value} (${percentage}%)`;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      onClick: (event, elements) => {\r\n        if (elements.length > 0){\r\n          const index = elements[0].index;\r\n          this.selectRequestStatus(this.requestStatuses[index]);\r\n        }\r\n      }\r\n    }\r\n\r\n    public donutChartData: ChartConfiguration['data'] = {\r\n      datasets: [{\r\n        data: [],\r\n        backgroundColor: [],\r\n        hoverBackgroundColor: []\r\n      }],\r\n      labels: []\r\n    }\r\n  \r\n    // Notifications\r\n    notifications: Notification[] = [\r\n      {\r\n        id: 1,\r\n        title: 'New Request',\r\n        message: 'A new request has been submitted for review',\r\n        type: 'info',\r\n        timestamp: new Date()\r\n      },\r\n      {\r\n        id: 2,\r\n        title: 'Approval Needed',\r\n        message: 'Pending approval for project X',\r\n        type: 'warning',\r\n        timestamp: new Date()\r\n      },\r\n      {\r\n        id: 3,\r\n        title: 'Successful Deployment',\r\n        message: 'Project Y has been successfully deployed',\r\n        type: 'success',\r\n        timestamp: new Date()\r\n      }\r\n    ];\r\n\r\n    \r\n  constructor(\r\n    private requestService: RequestsService,\r\n    private sharedService: SharedServiceService,\r\n    private approvalService: ApproveRequestService,\r\n    private deployService: DeployedTableService,\r\n    private cdr: ChangeDetectorRef\r\n  ){\r\n    Chart.register(...registerables);\r\n  }\r\n\r\n  ngOnInit():void{\r\n    this.user = this.sharedService.getUser();\r\n    this.loadExtraData();\r\n    \r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Use microtask to ensure view is fully initialized\r\n    Promise.resolve().then(() => {\r\n      this.initializeChart();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // Ensure chart is destroyed when component is destroyed\r\n    this.destroyChart();\r\n  }\r\n\r\n  private initializeChart(): void {\r\n    this.destroyChart();\r\n\r\n    if(!this.loading){\r\n      if (!this.chartCanvas) {\r\n        console.error('Chart canvas is not available');\r\n        return;\r\n      }\r\n    }\r\n\r\n    const ctx = this.chartCanvas?.nativeElement.getContext('2d');\r\n\r\n    if (ctx) {\r\n      // Create new chart\r\n      this.chartInstance = new Chart(ctx, {\r\n        type: 'doughnut',\r\n        data: this.getChartData(),\r\n        options: this.donutChartOptions\r\n      });\r\n    } else {\r\n      // console.error('Failed to get 2D context');\r\n      return;\r\n    }\r\n  }\r\n\r\n  private destroyChart(): void {\r\n    if (this.chartInstance) {\r\n      this.chartInstance.destroy();\r\n      this.chartInstance = null;\r\n    }\r\n  }\r\n\r\n  loadExtraData(): void {\r\n    this.loading = true;\r\n    this.trackRequests();\r\n  \r\n    let observables: { [key: string]: Observable<any> } = {};\r\n  \r\n    if (this.user.jobPosition === 'Account Officer') {\r\n      observables = {\r\n        pending: this.requestService.getPendingRequests(this.user.id),\r\n        approved: this.requestService.getApprovedRequest(this.user.id),\r\n        rejected: this.requestService.getRejectedRequests(this.user.id),\r\n        deployed: this.requestService.getDeployedRequests(this.user.id),\r\n        delivered: this.requestService.getDeliveredRequests(this.user.id)\r\n      };\r\n    } else if (this.user.jobPosition === 'Business Developer') {\r\n      observables = {\r\n        pending: this.approvalService.getPendinRequest(),\r\n        approved: this.approvalService.getApprovedRequest(),\r\n        rejected: this.approvalService.getRejectedRequest()\r\n      };\r\n    } else {\r\n      observables = {\r\n        deployed: this.requestService.getDeployedRequests(this.user.id),\r\n        delivered: this.requestService.getDeliveredRequests(this.user.id)\r\n      };\r\n    }\r\n  \r\n    forkJoin(observables).pipe(\r\n      finalize(() => {\r\n        this.updateRequestCards();\r\n        this.updateStausCards();\r\n        this.loading = false;\r\n        this.cdr.detectChanges();\r\n        this.updateDonutChart();\r\n      })\r\n    ).subscribe({\r\n      next: (results: any) => {\r\n        this.pendingCount = results.pending?.data.data.length || 0;\r\n        this.approvedCount = results.approved?.data.data.length || 0;\r\n        this.rejectedCount = results.rejected?.data.data.length || 0;\r\n        this.deployedCount = results.deployed?.data.data.length || 0;\r\n        this.deliveredCount = results.delivered?.data.data.length || 0;\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading dashboard data', error);\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  updateRequestCards(): void {\r\n    this.requestStatuses = [\r\n      { \r\n        status: 'Pending', \r\n        count: this.pendingCount, \r\n        color: '#FFC107',\r\n        description: 'Requests awaiting initial review and processing'\r\n      },\r\n      { \r\n        status: 'Approved', \r\n        count: this.approvedCount, \r\n        color: '#4CAF50',\r\n        description: 'Requests that have been reviewed and approved'\r\n      },\r\n      { \r\n        status: 'Rejected', \r\n        count: this.rejectedCount, \r\n        color: '#F44336',\r\n        description: 'Requests that did not meet the required criteria'\r\n      },\r\n      { \r\n        status: 'Deployed', \r\n        count: this.deployedCount, \r\n        color: '#2196F3',\r\n        description: 'Requests that have been implemented and are in production'\r\n      },\r\n      { \r\n        status: 'Delivered', \r\n        count: this.deliveredCount, \r\n        color: '#9C27B0',\r\n        description: 'Finalized requests that have been completed and delivered'\r\n      }\r\n    ];\r\n  }\r\n\r\n  updateDonutChart(): void {\r\n    if (this.chartInstance) {\r\n      this.chartInstance.data = this.getChartData();\r\n      this.chartInstance.update();\r\n    } else {\r\n      this.initializeChart();\r\n    }\r\n  }\r\n\r\n  getChartData(): ChartConfiguration['data'] {\r\n    return {\r\n      datasets: [{\r\n        data: this.requestStatuses.map(status => status.count),\r\n        backgroundColor: this.requestStatuses.map(status => status.color),\r\n        hoverBackgroundColor: this.requestStatuses.map(status => this.darkenColor(status.color, 0.2))\r\n      }],\r\n      labels: this.requestStatuses.map(status => status.status)\r\n    };\r\n  }\r\n\r\n  // Utility method to darken colors for hover effect\r\n  darkenColor(color: string, percent: number): string {\r\n    const num = parseInt(color.slice(1), 16);\r\n    const amt = Math.round(2.55 * percent);\r\n    const R = Math.max(0, Math.min(255, (num >> 16) - amt));\r\n    const B = Math.max(0, Math.min(255, ((num >> 8) & 0x00FF) - amt));\r\n    const G = Math.max(0, Math.min(255, (num & 0x0000FF) - amt));\r\n    return `#${(0x1000000 + R * 0x10000 + B * 0x100 + G).toString(16).slice(1)}`;\r\n  }\r\n\r\n\r\n  // Method to handle status selection\r\n  selectRequestStatus(status: RequestStatus): void {\r\n    this.selectedRequestStatus = status;\r\n  }\r\n  \r\n\r\n// Method to remove notification\r\nremoveNotification(id: number): void {\r\n  this.notifications = this.notifications.filter(n => n.id !== id);\r\n}\r\n\r\n// Method to get notification icon and color\r\ngetNotificationStyles(type: string): { icon: string, bgColor: string, textColor: string } {\r\n  switch(type) {\r\n    case 'success':\r\n      return { \r\n        icon: '✅', \r\n        bgColor: 'bg-green-100', \r\n        textColor: 'text-green-800' \r\n      };\r\n    case 'warning':\r\n      return { \r\n        icon: '⚠️', \r\n        bgColor: 'bg-yellow-100', \r\n        textColor: 'text-yellow-800' \r\n      };\r\n    case 'error':\r\n      return { \r\n        icon: '❌', \r\n        bgColor: 'bg-red-100', \r\n        textColor: 'text-red-800' \r\n      };\r\n    default:\r\n      return { \r\n        icon: 'ℹ️', \r\n        bgColor: 'bg-blue-100', \r\n        textColor: 'text-blue-800' \r\n      };\r\n  }\r\n}\r\n\r\n\r\nupdateStausCards():void{\r\n  if (this.user.jobPosition === 'Account Officer') {\r\n  this.statusCards = [\r\n    { \r\n      title: 'Pending', \r\n      count: this.pendingCount, \r\n      iconName: 'trending_up',\r\n      bgColor: 'bg-amber-50', \r\n      borderColor: 'border-amber-300', \r\n      textColor: 'text-amber-600',\r\n      trend: '+12%'\r\n    },\r\n    { \r\n      title: 'Approved', \r\n      count: this.approvedCount, \r\n      iconName: 'check_circle',\r\n      bgColor: 'bg-emerald-50', \r\n      borderColor: 'border-emerald-300', \r\n      textColor: 'text-emerald-600',\r\n      trend: '+8%'\r\n    },\r\n    { \r\n      title: 'Rejected', \r\n      count: this.rejectedCount, \r\n      iconName: 'cancel',\r\n      bgColor: 'bg-rose-50', \r\n      borderColor: 'border-rose-300', \r\n      textColor: 'text-rose-600',\r\n      trend: '-3%'\r\n    },\r\n    { \r\n      title: 'Deployed', \r\n      count: this.deployedCount, \r\n      iconName: 'rocket_launch',\r\n      bgColor: 'bg-sky-50', \r\n      borderColor: 'border-sky-300', \r\n      textColor: 'text-sky-600',\r\n      trend: '+22%'\r\n    },\r\n    { \r\n      title: 'Delivered', \r\n      count: this.deliveredCount, \r\n      iconName: 'inventory_2',\r\n      bgColor: 'bg-indigo-50', \r\n      borderColor: 'border-indigo-300', \r\n      textColor: 'text-indigo-600',\r\n      trend: '+15%'\r\n    }\r\n  ]\r\n}else if (this.user.jobPosition === 'Business Developer') {\r\n  this.statusCards = [\r\n    { \r\n      title: 'Pending', \r\n      count: this.pendingCount, \r\n      iconName: 'trending_up',\r\n      bgColor: 'bg-amber-50', \r\n      borderColor: 'border-amber-300', \r\n      textColor: 'text-amber-600',\r\n      trend: '+12%'\r\n    },\r\n    { \r\n      title: 'Approved', \r\n      count: this.approvedCount, \r\n      iconName: 'check_circle',\r\n      bgColor: 'bg-emerald-50', \r\n      borderColor: 'border-emerald-300', \r\n      textColor: 'text-emerald-600',\r\n      trend: '+8%'\r\n    },\r\n    { \r\n      title: 'Rejected', \r\n      count: this.rejectedCount, \r\n      iconName: 'cancel',\r\n      bgColor: 'bg-rose-50', \r\n      borderColor: 'border-rose-300', \r\n      textColor: 'text-rose-600',\r\n      trend: '-3%'\r\n    }\r\n  ]\r\n}\r\n}\r\n\r\ncreateNewRequest() {\r\n  // Implement navigation or modal for creating a new request\r\n  console.log('Create New Request');\r\n}\r\n\r\nviewApprovals() {\r\n  // Implement navigation to approvals view\r\n  console.log('View Approvals');\r\n}\r\n\r\ngenerateReport() {\r\n  console.log('Generate Report');\r\n}\r\n\r\ntrackRequests() {\r\n  this.subscriptions.push(\r\n    this.requestService.getProcessingTime().subscribe(\r\n      (data: ApiResponse<number>) => {\r\n        this.processingTime = data.data.data\r\n        console.log('Response ', this.processingTime)\r\n      }\r\n    )\r\n  )\r\n}\r\n\r\n}\r\n\r\n"
        }
    ]
}